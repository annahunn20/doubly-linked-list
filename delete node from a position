#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};
struct Node* head = NULL; // Assuming head is defined globally
void deleteAtPosition(int pos) {
    if (head == NULL) {
        printf("Empty List, Delete is not possible...\n");
        return;
    }
    struct Node* temp = head;
    int i = 1;
    // If position is 1, delete the head node
    if (pos == 1) {
        if (head->next != NULL) {
            head = head->next;
            head->prev = NULL;
        } else {
            head = NULL; // The list will be empty after this deletion
        }
        free(temp);
        return;
    }
    // Traverse to the node at position pos
    while (i < pos && temp != NULL) {
        temp = temp->next;
        i++;
    }
    // If temp is NULL, the position is invalid
    if (temp == NULL) {
        printf("Invalid Position...\n");
        return;
    }
    // If temp is the last node
    if (temp->next == NULL) {
        temp->prev->next = NULL;
    } else {
        // Update the pointers of the neighboring nodes
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
    }
    // Free the memory of the node to be deleted
    free(temp);
}
int main() {
    // Example usage of deleteAtPosition can be added here
    return 0;
}
